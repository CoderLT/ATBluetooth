// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WCProtobuf.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class MmBp_BasePush;
@class MmBp_BaseRequest;
@class MmBp_BaseResponse;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum MmBp_EmCmdId

typedef GPB_ENUM(MmBp_EmCmdId) {
  MmBp_EmCmdId_EciNone = 0,

  // req： 蓝牙设备 -&gt; 微信/厂商服务器
  MmBp_EmCmdId_EciReqAuth = 10001,

  // 蓝牙设备发送数据给微信或厂商
  MmBp_EmCmdId_EciReqSendData = 10002,

  // 初始化
  MmBp_EmCmdId_EciReqInit = 10003,

  // resp：微信/厂商服务器 -&gt; 蓝牙设备
  MmBp_EmCmdId_EciRespAuth = 20001,
  MmBp_EmCmdId_EciRespSendData = 20002,
  MmBp_EmCmdId_EciRespInit = 20003,

  // push：微信/厂商服务器 -&gt; 蓝牙设备
  MmBp_EmCmdId_EciPushRecvData = 30001,

  // 进入/退出界面
  MmBp_EmCmdId_EciPushSwitchView = 30002,

  // 切换后台
  MmBp_EmCmdId_EciPushSwitchBackgroud = 30003,

  // 解密失败的错误码。注意：这不是cmdid。为节省固定包头大小，这种特殊的错误码放在包头的cmdid字段。
  MmBp_EmCmdId_EciErrDecode = 29999,
};

GPBEnumDescriptor *MmBp_EmCmdId_EnumDescriptor(void);

BOOL MmBp_EmCmdId_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmErrorCode

typedef GPB_ENUM(MmBp_EmErrorCode) {
  // 通用的错误
  MmBp_EmErrorCode_EecSystem = -1,

  // 设备未登录
  MmBp_EmErrorCode_EecNeedAuth = -2,

  // session超时，需要重新登录
  MmBp_EmErrorCode_EecSessionTimeout = -3,

  // proto解码失败
  MmBp_EmErrorCode_EecDecode = -4,

  // 设备出现异常，导致被微信临时性禁止登录
  MmBp_EmErrorCode_EecDeviceIsBlock = -5,

  // ios处于后台模式，无法正常服务
  MmBp_EmErrorCode_EecServiceUnAvalibleInBackground = -6,

  // 设备的proto版本过老，需要更新
  MmBp_EmErrorCode_EecDeviceProtoVersionNeedUpdate = -7,

  // 微信客户端的proto版本过老，需要更新
  MmBp_EmErrorCode_EecPhoneProtoVersionNeedUpdate = -8,

  // 设备发送了多个请求，并且没有收到回包。微信客户端请求队列拥塞。
  MmBp_EmErrorCode_EecMaxReqInQueue = -9,

  // 用户退出微信帐号。
  MmBp_EmErrorCode_EecUserExitWxAccount = -10,
};

GPBEnumDescriptor *MmBp_EmErrorCode_EnumDescriptor(void);

BOOL MmBp_EmErrorCode_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmAuthMethod

// req, resp ========================================
typedef GPB_ENUM(MmBp_EmAuthMethod) {
  // 设备通过Md5DeviceTypeAndDeviceId，来通过微信app的认证。1. 如果是用aes加密，注意设置AesSign有值。 2. 如果是没有加密，注意设置AesSign为空或者长度为零。
  MmBp_EmAuthMethod_EamMd5 = 1,

  // 设备通过mac地址字段，且没有加密，来通过微信app的认证。
  MmBp_EmAuthMethod_EamMacNoEncrypt = 2,
};

GPBEnumDescriptor *MmBp_EmAuthMethod_EnumDescriptor(void);

BOOL MmBp_EmAuthMethod_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmInitRespFieldFilter

// 初始化 --------------------------------------------
typedef GPB_ENUM(MmBp_EmInitRespFieldFilter) {
  MmBp_EmInitRespFieldFilter_EirffUserNickName = 1,
  MmBp_EmInitRespFieldFilter_EirffPlatformType = 2,
  MmBp_EmInitRespFieldFilter_EirffModel = 4,
  MmBp_EmInitRespFieldFilter_EirffOs = 8,
  MmBp_EmInitRespFieldFilter_EirffTime = 16,
  MmBp_EmInitRespFieldFilter_EirffTimeZone = 32,
  MmBp_EmInitRespFieldFilter_EirffTimeString = 64,
};

GPBEnumDescriptor *MmBp_EmInitRespFieldFilter_EnumDescriptor(void);

BOOL MmBp_EmInitRespFieldFilter_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmInitScence

// 微信连接上设备时，处于什么情景
typedef GPB_ENUM(MmBp_EmInitScence) {
  // 聊天
  MmBp_EmInitScence_EisDeviceChat = 1,

  // 自动同步
  MmBp_EmInitScence_EisAutoSync = 2,
};

GPBEnumDescriptor *MmBp_EmInitScence_EnumDescriptor(void);

BOOL MmBp_EmInitScence_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmPlatformType

typedef GPB_ENUM(MmBp_EmPlatformType) {
  MmBp_EmPlatformType_EptIos = 1,
  MmBp_EmPlatformType_EptAndriod = 2,
  MmBp_EmPlatformType_EptWp = 3,
  MmBp_EmPlatformType_EptS60V3 = 4,
  MmBp_EmPlatformType_EptS60V5 = 5,
  MmBp_EmPlatformType_EptS40 = 6,
  MmBp_EmPlatformType_EptBb = 7,
};

GPBEnumDescriptor *MmBp_EmPlatformType_EnumDescriptor(void);

BOOL MmBp_EmPlatformType_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmDeviceDataType

// 设备发送数据给微信或厂商 ----------------------------
// 设备数据类型
typedef GPB_ENUM(MmBp_EmDeviceDataType) {
  // 厂商自定义数据
  MmBp_EmDeviceDataType_EddtManufatureSvr = 0,

  // 微信公众平台手环数据，手环上报计步数据
  MmBp_EmDeviceDataType_EddtWxWristBand = 1,

  // 微信客户端设备html5会话界面数据
  MmBp_EmDeviceDataType_EddtWxDeviceHtmlChatView = 10001,
};

GPBEnumDescriptor *MmBp_EmDeviceDataType_EnumDescriptor(void);

BOOL MmBp_EmDeviceDataType_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmSwitchViewOp

// 微信客户端进入退出界面的通知 ---------------------------
typedef GPB_ENUM(MmBp_EmSwitchViewOp) {
  MmBp_EmSwitchViewOp_EsvoEnter = 1,
  MmBp_EmSwitchViewOp_EsvoExit = 2,
};

GPBEnumDescriptor *MmBp_EmSwitchViewOp_EnumDescriptor(void);

BOOL MmBp_EmSwitchViewOp_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmViewId

typedef GPB_ENUM(MmBp_EmViewId) {
  // 微信客户端设备号会话界面
  MmBp_EmViewId_EviDeviceChatView = 1,

  // 微信客户端设备号Html5会话界面。注意：只有当H5界面主动和设备连接上之后，才会发送push。
  MmBp_EmViewId_EviDeviceChatHtmlView = 2,
};

GPBEnumDescriptor *MmBp_EmViewId_EnumDescriptor(void);

BOOL MmBp_EmViewId_IsValidValue(int32_t value);

#pragma mark - Enum MmBp_EmSwitchBackgroundOp

typedef GPB_ENUM(MmBp_EmSwitchBackgroundOp) {
  // 进入后台
  MmBp_EmSwitchBackgroundOp_EsboEnterBackground = 1,

  // 进入前台
  MmBp_EmSwitchBackgroundOp_EsboEnterForground = 2,

  // 后台休眠
  MmBp_EmSwitchBackgroundOp_EsboSleep = 3,
};

GPBEnumDescriptor *MmBp_EmSwitchBackgroundOp_EnumDescriptor(void);

BOOL MmBp_EmSwitchBackgroundOp_IsValidValue(int32_t value);

#pragma mark - WcprotobufRoot

@interface WcprotobufRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - MmBp_BaseRequest

@interface MmBp_BaseRequest : GPBMessage

@end

#pragma mark - MmBp_BaseResponse

typedef GPB_ENUM(MmBp_BaseResponse_FieldNumber) {
  MmBp_BaseResponse_FieldNumber_ErrCode = 1,
  MmBp_BaseResponse_FieldNumber_ErrMsg = 2,
};

@interface MmBp_BaseResponse : GPBMessage

@property(nonatomic, readwrite) BOOL hasErrCode;
@property(nonatomic, readwrite) int32_t errCode;

@property(nonatomic, readwrite) BOOL hasErrMsg;
@property(nonatomic, readwrite, copy, null_resettable) NSString *errMsg;

@end

#pragma mark - MmBp_BasePush

@interface MmBp_BasePush : GPBMessage

@end

#pragma mark - MmBp_AuthRequest

typedef GPB_ENUM(MmBp_AuthRequest_FieldNumber) {
  MmBp_AuthRequest_FieldNumber_BaseRequest = 1,
  MmBp_AuthRequest_FieldNumber_Md5DeviceTypeAndDeviceId = 2,
  MmBp_AuthRequest_FieldNumber_ProtoVersion = 3,
  MmBp_AuthRequest_FieldNumber_AuthProto = 4,
  MmBp_AuthRequest_FieldNumber_AuthMethod = 5,
  MmBp_AuthRequest_FieldNumber_AesSign = 6,
  MmBp_AuthRequest_FieldNumber_MacAddress = 7,
  MmBp_AuthRequest_FieldNumber_TimeZone = 10,
  MmBp_AuthRequest_FieldNumber_Language = 11,
  MmBp_AuthRequest_FieldNumber_DeviceName = 12,
};

// 登录 ---------------------------------------------
@interface MmBp_AuthRequest : GPBMessage

@property(nonatomic, readwrite) BOOL hasBaseRequest;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BaseRequest *baseRequest;

// deviceType加deviceId的md5，16字节的二进制数据
@property(nonatomic, readwrite) BOOL hasMd5DeviceTypeAndDeviceId;
@property(nonatomic, readwrite, copy, null_resettable) NSData *md5DeviceTypeAndDeviceId;

// 设备支持的本proto文件的版本号，第一个字节表示最小版本，第二个字节表示小版本，第三字节表示大版本。版本号为1.0.0的话，应该填：0x010000；1.2.3的话，填成0x010203。
@property(nonatomic, readwrite) BOOL hasProtoVersion;
@property(nonatomic, readwrite) int32_t protoVersion;

// 填1
@property(nonatomic, readwrite) BOOL hasAuthProto;
@property(nonatomic, readwrite) int32_t authProto;

// 验证和加密的方法，见EmAuthMethod
@property(nonatomic, readwrite) BOOL hasAuthMethod;
@property(nonatomic, readwrite) MmBp_EmAuthMethod authMethod;

// 具体生成方法见文档
@property(nonatomic, readwrite) BOOL hasAesSign;
@property(nonatomic, readwrite, copy, null_resettable) NSData *aesSign;

// mac地址，6位。当设备没有烧deviceId的时候，可使用该mac地址字段来通过微信app的认证
@property(nonatomic, readwrite) BOOL hasMacAddress;
@property(nonatomic, readwrite, copy, null_resettable) NSData *macAddress;

// 废弃
@property(nonatomic, readwrite) BOOL hasTimeZone;
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeZone;

// 废弃
@property(nonatomic, readwrite) BOOL hasLanguage;
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

// 废弃
@property(nonatomic, readwrite) BOOL hasDeviceName;
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceName;

@end

#pragma mark - MmBp_AuthResponse

typedef GPB_ENUM(MmBp_AuthResponse_FieldNumber) {
  MmBp_AuthResponse_FieldNumber_BaseResponse = 1,
  MmBp_AuthResponse_FieldNumber_AesSessionKey = 2,
};

@interface MmBp_AuthResponse : GPBMessage

@property(nonatomic, readwrite) BOOL hasBaseResponse;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BaseResponse *baseResponse;

@property(nonatomic, readwrite) BOOL hasAesSessionKey;
@property(nonatomic, readwrite, copy, null_resettable) NSData *aesSessionKey;

@end

#pragma mark - MmBp_InitRequest

typedef GPB_ENUM(MmBp_InitRequest_FieldNumber) {
  MmBp_InitRequest_FieldNumber_BaseRequest = 1,
  MmBp_InitRequest_FieldNumber_RespFieldFilter = 2,
  MmBp_InitRequest_FieldNumber_Challenge = 3,
};

@interface MmBp_InitRequest : GPBMessage

@property(nonatomic, readwrite) BOOL hasBaseRequest;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BaseRequest *baseRequest;

// 当一个bit被设置就表示要resp的某个字段：见EmInitRespFieldFilter。
@property(nonatomic, readwrite) BOOL hasRespFieldFilter;
@property(nonatomic, readwrite, copy, null_resettable) NSData *respFieldFilter;

// 设备用来验证手机是否安全。为设备随机生成的四个字节。
@property(nonatomic, readwrite) BOOL hasChallenge;
@property(nonatomic, readwrite, copy, null_resettable) NSData *challenge;

@end

#pragma mark - MmBp_InitResponse

typedef GPB_ENUM(MmBp_InitResponse_FieldNumber) {
  MmBp_InitResponse_FieldNumber_BaseResponse = 1,
  MmBp_InitResponse_FieldNumber_UserIdHigh = 2,
  MmBp_InitResponse_FieldNumber_UserIdLow = 3,
  MmBp_InitResponse_FieldNumber_ChalleangeAnswer = 4,
  MmBp_InitResponse_FieldNumber_InitScence = 5,
  MmBp_InitResponse_FieldNumber_AutoSyncMaxDurationSecond = 6,
  MmBp_InitResponse_FieldNumber_UserNickName = 11,
  MmBp_InitResponse_FieldNumber_PlatformType = 12,
  MmBp_InitResponse_FieldNumber_Model = 13,
  MmBp_InitResponse_FieldNumber_Os = 14,
  MmBp_InitResponse_FieldNumber_Time = 15,
  MmBp_InitResponse_FieldNumber_TimeZone = 16,
  MmBp_InitResponse_FieldNumber_TimeString = 17,
};

@interface MmBp_InitResponse : GPBMessage

@property(nonatomic, readwrite) BOOL hasBaseResponse;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BaseResponse *baseResponse;

// 微信用户Id高32位
@property(nonatomic, readwrite) BOOL hasUserIdHigh;
@property(nonatomic, readwrite) uint32_t userIdHigh;

// 微信用户Id低32位
@property(nonatomic, readwrite) BOOL hasUserIdLow;
@property(nonatomic, readwrite) uint32_t userIdLow;

// 手机回复设备的挑战。为设备生成的字节的crc32。
@property(nonatomic, readwrite) BOOL hasChalleangeAnswer;
@property(nonatomic, readwrite) uint32_t challeangeAnswer;

// 微信连接上设备时，处于什么情景。如果该字段为空，表示处于EIS_deviceChat下。
@property(nonatomic, readwrite) BOOL hasInitScence;
@property(nonatomic, readwrite) MmBp_EmInitScence initScence;

// 自动同步最多持续多长，微信就会关闭连接。0xffffffff表示无限长。
@property(nonatomic, readwrite) BOOL hasAutoSyncMaxDurationSecond;
@property(nonatomic, readwrite) uint32_t autoSyncMaxDurationSecond;

// 微信用户昵称
@property(nonatomic, readwrite) BOOL hasUserNickName;
@property(nonatomic, readwrite, copy, null_resettable) NSString *userNickName;

// 手机平台
@property(nonatomic, readwrite) BOOL hasPlatformType;
@property(nonatomic, readwrite) MmBp_EmPlatformType platformType;

// 手机硬件型号
@property(nonatomic, readwrite) BOOL hasModel;
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

// 手机os版本
@property(nonatomic, readwrite) BOOL hasOs;
@property(nonatomic, readwrite, copy, null_resettable) NSString *os;

// 手机当前时间
@property(nonatomic, readwrite) BOOL hasTime;
@property(nonatomic, readwrite) int32_t time;

// 手机当前时区
@property(nonatomic, readwrite) BOOL hasTimeZone;
@property(nonatomic, readwrite) int32_t timeZone;

// 手机当前时间，格式如201402281005285，具体字段意义为2014（年）02（2月）28（28号）10（点）05（分钟）28（秒）5（星期五）。星期一为1，星期天为7。
@property(nonatomic, readwrite) BOOL hasTimeString;
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeString;

@end

#pragma mark - MmBp_SendDataRequest

typedef GPB_ENUM(MmBp_SendDataRequest_FieldNumber) {
  MmBp_SendDataRequest_FieldNumber_BaseRequest = 1,
  MmBp_SendDataRequest_FieldNumber_Data_p = 2,
  MmBp_SendDataRequest_FieldNumber_Type = 3,
};

@interface MmBp_SendDataRequest : GPBMessage

@property(nonatomic, readwrite) BOOL hasBaseRequest;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BaseRequest *baseRequest;

@property(nonatomic, readwrite) BOOL hasData_p;
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

// 数据类型(如厂商自定义数据，或公众平台规定的手环数据，或微信客户端设备html5会话界面数据等）。不填，或者等于0的时候，表示设备发送厂商自定义数据到厂商服务器。
@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite) MmBp_EmDeviceDataType type;

@end

#pragma mark - MmBp_SendDataResponse

typedef GPB_ENUM(MmBp_SendDataResponse_FieldNumber) {
  MmBp_SendDataResponse_FieldNumber_BaseResponse = 1,
  MmBp_SendDataResponse_FieldNumber_Data_p = 2,
};

@interface MmBp_SendDataResponse : GPBMessage

@property(nonatomic, readwrite) BOOL hasBaseResponse;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BaseResponse *baseResponse;

@property(nonatomic, readwrite) BOOL hasData_p;
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@end

#pragma mark - MmBp_RecvDataPush

typedef GPB_ENUM(MmBp_RecvDataPush_FieldNumber) {
  MmBp_RecvDataPush_FieldNumber_BasePush = 1,
  MmBp_RecvDataPush_FieldNumber_Data_p = 2,
  MmBp_RecvDataPush_FieldNumber_Type = 3,
};

// push ===================================================
// 微信或厂商发送数据给蓝牙设备 ---------------------------
@interface MmBp_RecvDataPush : GPBMessage

@property(nonatomic, readwrite) BOOL hasBasePush;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BasePush *basePush;

@property(nonatomic, readwrite) BOOL hasData_p;
@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

// 数据类型(如厂商自定义数据，或公众平台规定的手环数据，或微信客户端设备html5会话界面数据等）。不填，或者等于0的时候，表示设备收到厂商自定义数据。
@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite) MmBp_EmDeviceDataType type;

@end

#pragma mark - MmBp_SwitchViewPush

typedef GPB_ENUM(MmBp_SwitchViewPush_FieldNumber) {
  MmBp_SwitchViewPush_FieldNumber_BasePush = 1,
  MmBp_SwitchViewPush_FieldNumber_SwitchViewOp = 2,
  MmBp_SwitchViewPush_FieldNumber_ViewId = 3,
};

@interface MmBp_SwitchViewPush : GPBMessage

@property(nonatomic, readwrite) BOOL hasBasePush;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BasePush *basePush;

// 进入或者退出View
@property(nonatomic, readwrite) BOOL hasSwitchViewOp;
@property(nonatomic, readwrite) MmBp_EmSwitchViewOp switchViewOp;

// view的id
@property(nonatomic, readwrite) BOOL hasViewId;
@property(nonatomic, readwrite) MmBp_EmViewId viewId;

@end

#pragma mark - MmBp_SwitchBackgroudPush

typedef GPB_ENUM(MmBp_SwitchBackgroudPush_FieldNumber) {
  MmBp_SwitchBackgroudPush_FieldNumber_BasePush = 1,
  MmBp_SwitchBackgroudPush_FieldNumber_SwitchBackgroundOp = 2,
};

// 微信客户端进入退出后台的通知 ------------------------------
@interface MmBp_SwitchBackgroudPush : GPBMessage

@property(nonatomic, readwrite) BOOL hasBasePush;
@property(nonatomic, readwrite, strong, null_resettable) MmBp_BasePush *basePush;

@property(nonatomic, readwrite) BOOL hasSwitchBackgroundOp;
@property(nonatomic, readwrite) MmBp_EmSwitchBackgroundOp switchBackgroundOp;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
